<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="copy_as_object_merge" label="Copy as OM" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import hou
import os.path
import random
import re

# Normal click: apply base color and copy as ObjectMerge
# Ctrl click  : apply random color and copy as ObjectMerge
# Shift click : just apply base color

# Check if the shelf was ctrl-clicked
ctrlclick = kwargs["ctrlclick"] if "ctrlclick" in kwargs else False
shiftclick = kwargs["shiftclick"] if "shiftclick" in kwargs else False

# Create colors
basecolor = hou.Color([0.094, 0.369, 0.69])
randcolor = []
for i in range(3):
    randcolor.append(random.random())
randcolor = hou.Color(randcolor)

# Main
selectedNodes = hou.selectedNodes()

if len(selectedNodes) == 0:
    hou.ui.displayMessage("Please select a node")
elif len(selectedNodes) > 1:
    hou.ui.displayMessage("Please select only one node")
else:
    for node in selectedNodes:
        # Change selected node's appearance
        nodePath = node.path()
        node.setUserData('nodeshape', 'chevron_down')
        if ctrlclick:
            node.setColor(randcolor)
        else:
            node.setColor(basecolor)
        # Copy as ObjectMerge
        if not shiftclick:
            curPath = os.path.dirname(nodePath)
            curname = os.path.basename(nodePath)
            curname = re.sub(r'^OUT_', '', curname)
            objectMerge = hou.node(curPath).createNode('object_merge', 'in_' + curname)
            objectMerge.parm('objpath1').set(nodePath)
            objectMerge.setSelected(True, clear_all_selected=True)
            objectMerge.setUserData('nodeshape', 'chevron_down')
            if ctrlclick:
                objectMerge.setColor(randcolor)
            
            # Copy object merge node to clipboard
            sel = hou.selectedNodes()
            hou.copyNodesToClipboard(sel)
            objectMerge.destroy()
        
        node.setSelected(True, clear_all_selected=True)
]]></script>
  </tool>

  <tool name="create_pbr_shader" label="Create PBR Shader" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import os
import fnmatch
import re


master_filename = hou.ui.selectFile(
    title="Select a File"
)
dirname = os.path.dirname(master_filename)
basename = os.path.basename(master_filename)
prefix = basename.split('.')[-1]
basename = '_'.join(basename.split('_')[:-1])


# Select similar files
# ----------------------------------------
matches = []
p = re.compile('.*%s_.+\.%s' % (basename, prefix))
for root, dirnames, filenames in os.walk(dirname):
    for filename in filenames:
        if p.match(filename):
            matches.append(os.path.join(root, filename))

            
#node = hou.node("/mat").createNode("principledshader::2.0", node_name="mypbr")
vop = hou.node("/mat").createNode("redshift_vopnet", node_name="mypbr")
mat = hou.node("/mat/%s/Material1" % (vop.name()))

# Set fresnel type to metalness
mat.parm("refl_fresnel_mode").set("2")

# Create texture nodes
# ----------------------------------------
textures = [
    {"name": "diffuse",   "texture": "color",     "input": "diffuse_color" },
    {"name": "roughness", "texture": "roughness", "input": "refl_roughness"},
    {"name": "metalness", "texture": "metalness", "input": "refl_metalness"}
]
# Create and plug texture node if there's a matching texture
for d in textures:
    texture_re = re.compile(r'.*_%s.%s' % (d["texture"], prefix), re.IGNORECASE)
    for filename in matches:
        if texture_re.match(filename):
            texture_node = mat.createInputNode(mat.inputIndex(d["input"]), "redshift::TextureSampler", node_name=d["name"])
            texture_node.parm("tex0").set(filename)
            break
        
# Create bumpmap if there is one
bumpmap_re = re.compile(r'.*_normal.%s' % (prefix,), re.IGNORECASE)
for filename in matches:
    if bumpmap_re.match(filename):
        bumpmap = mat.createInputNode(mat.inputIndex("bump_input"), "redshift::BumpMap", node_name="BumpMap")
        bumpmap.parm("inputType").set("1")
        bumpmap_tex = bumpmap.createInputNode(bumpmap.inputIndex("input"), "redshift::TextureSampler", node_name="bumpmap_texture")
        bumpmap_tex.parm("tex0").set(filename)
        break
        
# Layout
vop.layoutChildren()]]></script>
  </tool>

  <tool name="dabin_place_box" label="Place Box" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import os

import dabinUtils as utils

#DEBUG
#from importlib import reload
#reload(utils)


selectedNodes = utils.getSelectedNodes()

if selectedNodes:
    # Get node info
    # -------------------------------------------------
    node = selectedNodes[0]
    nodePath = node.path()
    dirPath = os.path.dirname(nodePath)
    nodePos = node.position()
    bbox = node.geometry().boundingBox()
    bsize = bbox.sizevec()
    bpos = bbox.center()
    
    # Create box
    # -------------------------------------------------
    box = hou.node(dirPath).createNode('box', 'the_box')
    # Place box to the right in the network viewer
    box.setPosition(hou.Vector2([nodePos[0]+2, nodePos[1]]))
    # Set parms
    box.parm('sizex').set(bsize[0])
    box.parm('sizey').set(bsize[1])
    box.parm('sizez').set(bsize[2])
    box.parm('tx').set(bpos[0])
    box.parm('ty').set(bpos[1])
    box.parm('tz').set(bpos[2])
    # Focus on node
    box.setSelected(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="statedemo" label="State Demo" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import stateutils

# Check if the viewer is at SOP level
viewer = stateutils.findSceneViewer()
network = viewer.pwd()
if network.childTypeCategory() != hou.sopNodeTypeCategory():
    # Ask the user to go into SOP level
    hou.ui.displayMessage("Please dive into a SOP node.")
else:
    # Set viewer state
    viewer.setCurrentState("statedemo")
    ]]></script>
  </tool>

  <toolshelf name="dabin_tools" label="dnTools">
    <memberTool name="copy_as_object_merge"/>
    <memberTool name="statedemo"/>
    <memberTool name="dabin_renamer"/>
    <memberTool name="create_pbr_shader"/>
    <memberTool name="dabin_place_box"/>
    <memberTool name="dabin_promote_rig_pose_parms"/>
  </toolshelf>

  <tool name="dabin_promote_rig_pose_parms" label="Promote Rig Pose Parms" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import dabinUtils as utils
import dabinPromoteParms as dpp

# DEBUG
from importlib import reload
reload(dpp)
reload(utils)

selectedNodes = utils.getSelectedNodes()

if selectedNodes:
    inst = dpp.PromoteParms(selectedNodes)
    inst.promoteRigParms()
]]></script>
  </tool>

  <tool name="dabin_renamer" label="Rename nodes" icon="MISC_python">
    <script scriptType="python"><![CDATA[import dabinRenamer

# DEBUG
# ----------
from importlib import reload
reload(dabinRenamer)
# ----------

renamer = dabinRenamer.Renamer()
renamer.show()
]]></script>
  </tool>
</shelfDocument>
