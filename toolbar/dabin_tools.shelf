<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="copy_as_object_merge" label="Copy as OM" icon="$DABIN_TOOLS/icons/copy-solid.svg">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import hou
import os.path
import random
import re

# Normal click: apply base color and copy as ObjectMerge
# Ctrl click  : apply random color and copy as ObjectMerge
# Shift click : just apply base color

# Check if the shelf was ctrl-clicked
ctrlclick = kwargs["ctrlclick"] if "ctrlclick" in kwargs else False
shiftclick = kwargs["shiftclick"] if "shiftclick" in kwargs else False

# Create colors
basecolor = hou.Color([0.094, 0.369, 0.69])
randcolor = []
for i in range(3):
    randcolor.append(random.random())
randcolor = hou.Color(randcolor)

# Main
selectedNodes = hou.selectedNodes()

if len(selectedNodes) == 0:
    hou.ui.displayMessage("Please select a node")
elif len(selectedNodes) > 1:
    hou.ui.displayMessage("Please select only one node")
else:
    for node in selectedNodes:
        # Change selected node's appearance
        nodePath = node.path()
        node.setUserData('nodeshape', 'chevron_down')
        if ctrlclick:
            node.setColor(randcolor)
        else:
            node.setColor(basecolor)
        # Copy as ObjectMerge
        if not shiftclick:
            curPath = os.path.dirname(nodePath)
            curname = os.path.basename(nodePath)
            # curname = re.sub(r'^OUT_', '', curname)
            parent_name = node.parent().name()
            objectMerge = hou.node(curPath).createNode('object_merge', f'in_{parent_name}_{curname}')
            objectMerge.parm('objpath1').set(nodePath)
            objectMerge.setSelected(True, clear_all_selected=True)
            objectMerge.setUserData('nodeshape', 'chevron_down')
            if ctrlclick:
                objectMerge.setColor(randcolor)
            
            # Copy object merge node to clipboard
            sel = hou.selectedNodes()
            hou.copyNodesToClipboard(sel)
            objectMerge.destroy()
        
        node.setSelected(True, clear_all_selected=True)
]]></script>
  </tool>

  <tool name="create_pbr_shader" label="Create PBR Shader" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import os
import fnmatch
import re


master_filename = hou.ui.selectFile(
    title="Select a File"
)
dirname = os.path.dirname(master_filename)
basename = os.path.basename(master_filename)
prefix = basename.split('.')[-1]
basename = '_'.join(basename.split('_')[:-1])


# Select similar files
# ----------------------------------------
matches = []
p = re.compile('.*%s_.+\.%s' % (basename, prefix))
for root, dirnames, filenames in os.walk(dirname):
    for filename in filenames:
        if p.match(filename):
            matches.append(os.path.join(root, filename))

            
#node = hou.node("/mat").createNode("principledshader::2.0", node_name="mypbr")
vop = hou.node("/mat").createNode("redshift_vopnet", node_name="mypbr")
mat = hou.node("/mat/%s/Material1" % (vop.name()))

# Set fresnel type to metalness
mat.parm("refl_fresnel_mode").set("2")

# Create texture nodes
# ----------------------------------------
textures = [
    {"name": "diffuse",   "texture": "color",     "input": "diffuse_color" },
    {"name": "roughness", "texture": "roughness", "input": "refl_roughness"},
    {"name": "metalness", "texture": "metalness", "input": "refl_metalness"}
]
# Create and plug texture node if there's a matching texture
for d in textures:
    texture_re = re.compile(r'.*_%s.%s' % (d["texture"], prefix), re.IGNORECASE)
    for filename in matches:
        if texture_re.match(filename):
            texture_node = mat.createInputNode(mat.inputIndex(d["input"]), "redshift::TextureSampler", node_name=d["name"])
            texture_node.parm("tex0").set(filename)
            break
        
# Create bumpmap if there is one
bumpmap_re = re.compile(r'.*_normal.%s' % (prefix,), re.IGNORECASE)
for filename in matches:
    if bumpmap_re.match(filename):
        bumpmap = mat.createInputNode(mat.inputIndex("bump_input"), "redshift::BumpMap", node_name="BumpMap")
        bumpmap.parm("inputType").set("1")
        bumpmap_tex = bumpmap.createInputNode(bumpmap.inputIndex("input"), "redshift::TextureSampler", node_name="bumpmap_texture")
        bumpmap_tex.parm("tex0").set(filename)
        break
        
# Layout
vop.layoutChildren()]]></script>
  </tool>

  <tool name="dabin_place_box" label="Place Box" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import os

import dabinUtils as utils

#DEBUG
#from importlib import reload
#reload(utils)


selectedNodes = utils.getSelectedNodes()

if selectedNodes:
    # Get node info
    # -------------------------------------------------
    node = selectedNodes[0]
    nodePath = node.path()
    dirPath = os.path.dirname(nodePath)
    nodePos = node.position()
    bbox = node.geometry().boundingBox()
    bsize = bbox.sizevec()
    bpos = bbox.center()
    
    # Create box
    # -------------------------------------------------
    box = hou.node(dirPath).createNode('box', 'the_box')
    # Place box to the right in the network viewer
    box.setPosition(hou.Vector2([nodePos[0]+2, nodePos[1]]))
    # Set parms
    box.parm('sizex').set(bsize[0])
    box.parm('sizey').set(bsize[1])
    box.parm('sizez').set(bsize[2])
    box.parm('tx').set(bpos[0])
    box.parm('ty').set(bpos[1])
    box.parm('tz').set(bpos[2])
    # Focus on node
    box.setSelected(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="statedemo" label="State Demo" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import stateutils

# Check if the viewer is at SOP level
viewer = stateutils.findSceneViewer()
network = viewer.pwd()
if network.childTypeCategory() != hou.sopNodeTypeCategory():
    # Ask the user to go into SOP level
    hou.ui.displayMessage("Please dive into a SOP node.")
else:
    # Set viewer state
    viewer.setCurrentState("statedemo")
    ]]></script>
  </tool>

  <toolshelf name="dabin_tools" label="dnTools">
    <memberTool name="copy_as_object_merge"/>
    <memberTool name="dabin_renamer"/>
    <memberTool name="dabin_create_rndr_node"/>
    <memberTool name="promote_parm_to_controller"/>
    <memberTool name="dabin_toggle_displayflag"/>
    <memberTool name="dabin_increment_version"/>
    <memberTool name="statedemo"/>
    <memberTool name="create_pbr_shader"/>
    <memberTool name="dabin_place_box"/>
    <memberTool name="dabin_promote_rig_pose_parms"/>
    <memberTool name="dabin_check_node"/>
    <memberTool name="merge_objets_under_subnet"/>
    <memberTool name="merge_megascans_assets"/>
    <memberTool name="check_for_external_files"/>
    <memberTool name="tool_1"/>
  </toolshelf>

  <tool name="dabin_promote_rig_pose_parms" label="Promote Rig Pose Parms" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import dabinUtils as utils
import dabinPromoteParms as dpp

# DEBUG
from importlib import reload
reload(dpp)
reload(utils)

selectedNodes = utils.getSelectedNodes()

if selectedNodes:
    inst = dpp.PromoteParms(selectedNodes)
    inst.promoteRigParms()
]]></script>
  </tool>

  <tool name="dabin_renamer" label="Rename nodes" icon="$DABIN_TOOLS/icons/pen-to-square-regular.svg">
    <script scriptType="python"><![CDATA[import dabinRenamer

# DEBUG
# ----------
from importlib import reload
reload(dabinRenamer)
# ----------

renamer = dabinRenamer.Renamer()
renamer.show()
]]></script>
  </tool>

  <tool name="dabin_increment_version" label="Increment Version" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import re
import dabinUtils as utils

def increment(version):
    return f"{int(version)+1:03}"

nodes = utils.getSelectedNodes()

with hou.undos.group("Increment node versions"):
    original_names = []
    for node in nodes:
        original_name = node.name()
        original_names.append(original_name)
        node.setName(original_name + "_bak")
        
    for i, node in enumerate(nodes):
        original_name = original_names[i]
        
        pattern = re.compile(r"(\d+)$")
        match = pattern.search(original_name)
        
        if match is None:
            node.setName(original_name + "_v001")
        else:
            result = pattern.sub(lambda exp: increment(exp.group(1)), original_name)
            node.setName(result)
]]></script>
  </tool>

  <tool name="dabin_create_rndr_node" label="Create rndr nodes" icon="$DABIN_TOOLS/icons/camera-retro-solid.svg">
    <script scriptType="python"><![CDATA[import hou
import re

import dabinUtils as utils

basecolor = hou.Color([132/255, 112/255, 218/255])
baseshape = 'chevron_down'

nodes = utils.getSelectedNodes()
for i, node in enumerate(nodes):
    # Get selected node's info
    node_name = re.sub('^OUT_', '', node.name())
    parent_name = node.parent().name()
    parent_pos = node.parent().position()
    
    # Shape selected node
    node.setColor(basecolor)
    node.setUserData('nodeshape', baseshape)
    
    # Create a rndr node
    rndr_node = hou.node("/obj").createNode("geo")
    rndr_node.setName(f"rndr_{parent_name}_{node_name}")
    rndr_node.setColor(hou.Color([115/256, 94/256, 203/256]))
    rndr_node.setPosition((parent_pos[0]+2.5, parent_pos[1] - 1.0 * i))
    
    # Create an object merge inside the rndr node
    om_node = rndr_node.createNode("object_merge")
    om_node.setName(f"in_{parent_name}_{node_name}")
    om_node.parm('objpath1').set(node.path())
    om_node.setUserData('nodeshape', baseshape)
]]></script>
  </tool>

  <tool name="dabin_check_node" label="Check Node" icon="$DABIN_TOOLS/icons/bug-solid.svg">
    <script scriptType="python"><![CDATA[import hou
import dabinUtils as utils

nodes = utils.getSelectedNodes()
node = nodes[0]

print(node.type())]]></script>
  </tool>

  <tool name="dabin_toggle_displayflag" label="Toggle Display Flag" icon="$DABIN_TOOLS/icons/eye-solid.svg">
    <script scriptType="python"><![CDATA[import hou
import dabinUtils as utils

nodes = hou.selectedNodes()

# If no node is selected, target all nodes
if len(nodes) == 0:
    nodes = hou.node('/obj').children()

# Check if any node has the display flag on
isAnyFlagSet = False
for node in nodes:
    if "isDisplayFlagSet" in dir(node) and node.isDisplayFlagSet():
        isAnyFlagSet = True
        break
        
# # Set display flag
for node in nodes:
    try:
        node.setDisplayFlag(not isAnyFlagSet)
    except AttributeError:
        pass]]></script>
  </tool>

  <tool name="promote_parm_to_controller" label="Promote Parm to Controller" icon="$DABIN_TOOLS/icons/wrench-solid.svg">
    <script scriptType="python"><![CDATA[import hou
import re
from pathlib import PurePosixPath as Path
from dabinUtils import snakeCaseToSpaced

parms = hou.parmClipboardContents()
parm_obj = parms[0]

# check if a controller exists in the same layer
parm_path = Path(parm_obj["path"])
parent = parm_path.parents[1]
node = hou.node(str(parm_path.parents[0]))
parent_node = hou.node(str(parent))
ctrl_node = hou.node(str(parent / "CONTROL"))


if ctrl_node is None:
    ctrl_node = parent.createNode('null', node_name='CONTROL')

# check if a parameter with the same name exists (include node name in parm name)
node_name = node.name()
node_name = re.sub("^set_", "", node_name) # remove set_ from name
node_name = re.sub("\d+$", "", node_name) # remove trailing digits
ctrl_parm_name = f"{node_name}_{parm_path.name}"

parm_group = node.parmTemplateGroup()
parm_temp = parm_group.find(parm_path.name)
ctrl_parm_group = ctrl_node.parmTemplateGroup()
ctrl_parm_temp = ctrl_parm_group.find(ctrl_parm_name)


# if ctrl parm doesn't exist, create new parm in controller 
if ctrl_parm_temp is None:
    # reuse target node's parm
    parm_temp.setName(ctrl_parm_name)
    
    # ask user for parameter name
    (_, input_label) = hou.ui.readInput("New paramter label:")
    if input_label is "":
        input_label = snakeCaseToSpaced(ctrl_parm_name)
    parm_temp.setLabel(input_label)

    ctrl_parm_group.append(parm_temp)
    ctrl_node.setParmTemplateGroup(ctrl_parm_group)
    
# set ctrl value to target node value if we're creating a new ctrl parameter
ctrl_parm = ctrl_node.parm(ctrl_parm_name)
if ctrl_parm_temp is None:
    ctrl_parm.set(parm_obj["value"])

# pass relative reference to parm
parm = node.parm(parm_path.name)

parm.set(ctrl_parm)


]]></script>
  </tool>

  <tool name="merge_megascans_assets" label="Merge Megascans Assets" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
from pathlib import PurePosixPath as Path


geos = hou.selectedNodes()

container_geo = hou.node("/obj").createNode("geo")
container_geo.setName("instancer")
container_geo.moveToGoodPosition()


# merge_geo = geo.createNode("merge_object")
merge_packed = container_geo.createNode("mergepacked")

for geo in geos:
    name = geo.name()
    out_geo_path = Path("/obj") / Path(name) / Path("Asset_Geometry") / Path(f"{name}_lod0")
    om = container_geo.createNode("object_merge")
    om.parm('objpath1').set(str(out_geo_path))
    merge_packed.setNextInput(om)]]></script>
  </tool>

  <tool name="check_for_external_files" label="Check For External Files" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
from pathlib import Path
import os
import shutil

hipdir = os.environ["HIP"]
hipdir = str(Path(hipdir).resolve())
hipdir_posix = Path(hipdir).as_posix()

def is_in_hip(path):
    abs_path = str(Path(path).resolve())
    return abs_path.startswith(hipdir) or abs_path.startswith("$HIP")

references = hou.fileReferences()

copied_files = {}

for ref in references:
    if (not is_in_hip(ref[1])) and (ref[0] is not None):
        # 1. print refs
        # -------------------------------------
        print(ref)

        # 2. copy assets, and assign new asset path to file parm
        # -------------------------------------
        # # check if path is already cached
        # if (ref[1] in copied_files):
        #     # used cached path
        #     newFilePath = copied_files[ref[1]]
        #     print(f"Path cached: {Path(ref[1]).name}")
        # else:
        #     # calculate new file path
        #     param_path = Path(ref[0].path()[1:])
        #     filename = Path(ref[1]).name
        #     newFilePath = Path(hipdir) / Path("packed_assets") / param_path / filename
            
        #     # print(newFilePath)
        #     # print(ref[0], ref[1])
            
        #     # check if src exists, skip if not
        #     if not Path(ref[1]).exists():
        #         print(f"Doesn't exist: {ref[1]}")
        #         continue
            
        #     # copy file
        #     newFilePath.parent.mkdir(parents=True, exist_ok=True)
        #     shutil.copyfile(ref[1], newFilePath)
            
        #     # update cache
        #     copied_files[ref[1]] = newFilePath
            
        # # Substitute hip dir with $HIP
        # newFilePathStr = newFilePath.resolve().as_posix()
        # newFilePathStr = newFilePathStr.replace(hipdir_posix, "$HIP")
        
        # print(newFilePathStr)
        
        # # Set param to new file
        # parm = hou.parm(ref[0].path())
        # parm.set(newFilePathStr)
        
        
for i in range(24): print()]]></script>
  </tool>
</shelfDocument>
